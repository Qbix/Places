/**
 * Autogenerated base class representing ipv6 rows
 * in the Places database.
 *
 * Don't change this file, since it can be overwritten.
 * Instead, change the Places/Ipv6.js file.
 *
 * @module Places
 */

var Q = require('Q');
var Db = Q.require('Db');
var Places = Q.require('Places');
var Row = Q.require('Db/Row');

/**
 * Base class representing 'Ipv6' rows in the 'Places' database
 * @namespace Base.Places
 * @class Ipv6
 * @extends Db.Row
 * @constructor
 * @param {Object} [fields={}] The fields values to initialize table row as 
 * an associative array of {column: value} pairs
 * @param {String|Buffer} [fields.ipMin] defaults to ""
 * @param {String|Buffer} [fields.ipMax] defaults to ""
 * @param {Integer} [fields.geonameId] defaults to 0
 * @param {String} [fields.countryCode] defaults to null
 * @param {Integer} [fields.registeredGeonameId] defaults to 0
 * @param {Integer} [fields.representedGeonameId] defaults to 0
 * @param {Integer} [fields.isAnonymousProxy] defaults to 0
 * @param {Integer} [fields.isSatelliteProvider] defaults to 0
 * @param {String} [fields.postcode] defaults to null
 * @param {Number} [fields.latitude] defaults to 0
 * @param {Number} [fields.longitude] defaults to 0
 * @param {Integer} [fields.accuracy] defaults to 0
 * @param {Integer} [fields.isAnycast] defaults to 0
 */
function Base (fields) {
	Base.constructors.apply(this, arguments);
}

Q.mixin(Base, Row);

/**
 * @property ipMin
 * @type String|Buffer
 * @default ""
 * 
 */
/**
 * @property ipMax
 * @type String|Buffer
 * @default ""
 * 
 */
/**
 * @property geonameId
 * @type Integer
 * @default 0
 * 
 */
/**
 * @property countryCode
 * @type String
 * @default null
 * 
 */
/**
 * @property registeredGeonameId
 * @type Integer
 * @default 0
 * 
 */
/**
 * @property representedGeonameId
 * @type Integer
 * @default 0
 * 
 */
/**
 * @property isAnonymousProxy
 * @type Integer
 * @default 0
 * 
 */
/**
 * @property isSatelliteProvider
 * @type Integer
 * @default 0
 * 
 */
/**
 * @property postcode
 * @type String
 * @default null
 * 
 */
/**
 * @property latitude
 * @type Number
 * @default 0
 * 
 */
/**
 * @property longitude
 * @type Number
 * @default 0
 * 
 */
/**
 * @property accuracy
 * @type Integer
 * @default 0
 * 
 */
/**
 * @property isAnycast
 * @type Integer
 * @default 0
 * 
 */

/**
 * This method calls Db.connect() using information stored in the configuration.
 * If this has already been called, then the same db object is returned.
 * @method db
 * @return {Db} The database connection
 */
Base.db = function () {
	return Places.db();
};

/**
 * Retrieve the table name to use in SQL statements
 * @method table
 * @param {boolean} [withoutDbName=false] Indicates wheather table name should contain the database name
 * @return {String|Db.Expression} The table name as string optionally without database name if no table sharding was started
 * or Db.Expression object with prefix and database name templates is table was sharded
 */
Base.table = function (withoutDbName) {
	if (Q.Config.get(['Db', 'connections', 'Places', 'indexes', 'Ipv6'], false)) {
		return new Db.Expression((withoutDbName ? '' : '{{dbname}}.')+'{{prefix}}ipv6');
	} else {
		var conn = Db.getConnection('Places');
		var prefix = conn.prefix || '';
		var tableName = prefix + 'ipv6';
		var dbname = Base.table.dbname;
		if (!dbname) {
			var dsn = Db.parseDsnString(conn['dsn']);
			dbname = Base.table.dbname = dsn.dbname;
		}
		return withoutDbName ? tableName : dbname + '.' + tableName;
	}
};

/**
 * The connection name for the class
 * @method connectionName
 * @return {String} The name of the connection
 */
Base.connectionName = function() {
	return 'Places';
};

/**
 * Create SELECT query to the class table
 * @method SELECT
 * @param {String|Object} [fields=null] The fields as strings, or object of {alias:field} pairs.
 *   The default is to return all fields of the table.
 * @param {String|Object} [alias=null] The tables as strings, or object of {alias:table} pairs.
 * @return {Db.Query.Mysql} The generated query
 */
Base.SELECT = function(fields, alias) {
	if (!fields) {
		fields = Base.fieldNames().map(function (fn) {
			return fn;
		}).join(',');
	}
	var q = Base.db().SELECT(fields, Base.table()+(alias ? ' '+alias : ''));
	q.className = 'Places_Ipv6';
	return q;
};

/**
 * Create UPDATE query to the class table. Use Db.Query.Mysql.set() method to define SET clause
 * @method UPDATE
 * @param {String} [alias=null] Table alias
 * @return {Db.Query.Mysql} The generated query
 */
Base.UPDATE = function(alias) {
	var q = Base.db().UPDATE(Base.table()+(alias ? ' '+alias : ''));
	q.className = 'Places_Ipv6';
	return q;
};

/**
 * Create DELETE query to the class table
 * @method DELETE
 * @param {Object}[table_using=null] If set, adds a USING clause with this table
 * @param {String} [alias=null] Table alias
 * @return {Db.Query.Mysql} The generated query
 */
Base.DELETE = function(table_using, alias) {
	var q = Base.db().DELETE(Base.table()+(alias ? ' '+alias : ''), table_using);
	q.className = 'Places_Ipv6';
	return q;
};

/**
 * Create INSERT query to the class table
 * @method INSERT
 * @param {Object} [fields={}] The fields as an associative array of {column: value} pairs
 * @param {String} [alias=null] Table alias
 * @return {Db.Query.Mysql} The generated query
 */
Base.INSERT = function(fields, alias) {
	var q = Base.db().INSERT(Base.table()+(alias ? ' '+alias : ''), fields || {});
	q.className = 'Places_Ipv6';
	return q;
};

/**
 * Create raw query with BEGIN clause.
 * You'll have to specify shards yourself when calling execute().
 * @method BEGIN
 * @param {string} [$lockType] First parameter to pass to query.begin() function
 * @return {Db.Query.Mysql} The generated query
 */
Base.BEGIN = function($lockType) {
	var q = Base.db().rawQuery('').begin($lockType);
	q.className = 'Places_Ipv6';
	return q;
};

/**
 * Create raw query with COMMIT clause
 * You'll have to specify shards yourself when calling execute().
 * @method COMMIT
 * @return {Db.Query.Mysql} The generated query
 */
Base.COMMIT = function() {
	var q = Base.db().rawQuery('').commit();
	q.className = 'Places_Ipv6';
	return q;
};

/**
 * Create raw query with ROLLBACK clause
 * @method ROLLBACK
 * @param {Object} criteria can be used to target the query to some shards.
 *   Otherwise you'll have to specify shards yourself when calling execute().
 * @return {Db.Query.Mysql} The generated query
 */
Base.ROLLBACK = function(criteria) {
	var q = Base.db().rawQuery('').rollback(crieria);
	q.className = 'Places_Ipv6';
	return q;
};

/**
 * The name of the class
 * @property className
 * @type string
 */
Base.prototype.className = "Places_Ipv6";

// Instance methods

/**
 * Create INSERT query to the class table
 * @method INSERT
 * @param {object} [fields={}] The fields as an associative array of {column: value} pairs
 * @param {string} [alias=null] Table alias
 * @return {Db.Query.Mysql} The generated query
 */
Base.prototype.setUp = function() {
	// does nothing for now
};

/**
 * Create INSERT query to the class table
 * @method INSERT
 * @param {object} [fields={}] The fields as an associative array of {column: value} pairs
 * @param {string} [alias=null] Table alias
 * @return {Db.Query.Mysql} The generated query
 */
Base.prototype.db = function () {
	return Base.db();
};

/**
 * Retrieve the table name to use in SQL statements
 * @method table
 * @param {boolean} [withoutDbName=false] Indicates wheather table name should contain the database name
 * @return {String|Db.Expression} The table name as string optionally without database name if no table sharding was started
 * or Db.Expression object with prefix and database name templates is table was sharded
 */
Base.prototype.table = function () {
	return Base.table();
};

/**
 * Retrieves primary key fields names for class table
 * @method primaryKey
 * @return {string[]} An array of field names
 */
Base.prototype.primaryKey = function () {
	return [
		"ipMin",
		"ipMax"
	];
};

/**
 * Retrieves field names for class table
 * @method fieldNames
 * @return {array} An array of field names
 */
Base.prototype.fieldNames = function () {
	return Base.fieldNames();
};

/**
 * Retrieves field names for class table
 * @method fieldNames
 * @static
 * @return {array} An array of field names
 */
Base.fieldNames = function () {
	return [
		"ipMin",
		"ipMax",
		"geonameId",
		"countryCode",
		"registeredGeonameId",
		"representedGeonameId",
		"isAnonymousProxy",
		"isSatelliteProvider",
		"postcode",
		"latitude",
		"longitude",
		"accuracy",
		"isAnycast"
	];
};

/**
 * Method is called before setting the field and verifies if value is string of length within acceptable limit.
 * Optionally accept numeric value which is converted to string
 * @method beforeSet_ipMin
 * @param {string} value
 * @return {string} The value
 * @throws {Error} An exception is thrown if 'value' is not string or is exceedingly long
 */
Base.prototype.beforeSet_ipMin = function (value) {
		if (value == null) {
			value='';
		}
		if (value instanceof Db.Expression) return value;
		if (typeof value !== "string" && typeof value !== "number" && !(value instanceof Buffer))
			throw new Error('Must pass a String or Buffer to '+this.table()+".ipMin");
		if (typeof value === "string" && value.length > 16)
			throw new Error('Exceedingly long value being assigned to '+this.table()+".ipMin");
		return value;
};

	/**
	 * Returns the maximum string length that can be assigned to the ipMin field
	 * @return {integer}
	 */
Base.prototype.maxSize_ipMin = function () {

		return 16;
};

	/**
	 * Returns schema information for ipMin column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
Base.column_ipMin = function () {

return [["varbinary","16","",false],false,"PRI",null];
};

/**
 * Method is called before setting the field and verifies if value is string of length within acceptable limit.
 * Optionally accept numeric value which is converted to string
 * @method beforeSet_ipMax
 * @param {string} value
 * @return {string} The value
 * @throws {Error} An exception is thrown if 'value' is not string or is exceedingly long
 */
Base.prototype.beforeSet_ipMax = function (value) {
		if (value == null) {
			value='';
		}
		if (value instanceof Db.Expression) return value;
		if (typeof value !== "string" && typeof value !== "number" && !(value instanceof Buffer))
			throw new Error('Must pass a String or Buffer to '+this.table()+".ipMax");
		if (typeof value === "string" && value.length > 16)
			throw new Error('Exceedingly long value being assigned to '+this.table()+".ipMax");
		return value;
};

	/**
	 * Returns the maximum string length that can be assigned to the ipMax field
	 * @return {integer}
	 */
Base.prototype.maxSize_ipMax = function () {

		return 16;
};

	/**
	 * Returns schema information for ipMax column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
Base.column_ipMax = function () {

return [["varbinary","16","",false],false,"PRI",null];
};

/**
 * Method is called before setting the field and verifies if integer value falls within allowed limits
 * @method beforeSet_geonameId
 * @param {integer} value
 * @return {integer} The value
 * @throws {Error} An exception is thrown if 'value' is not integer or does not fit in allowed range
 */
Base.prototype.beforeSet_geonameId = function (value) {
		if (value == undefined) return value;
		if (value instanceof Db.Expression) return value;
		value = Number(value);
		if (isNaN(value) || Math.floor(value) != value) 
			throw new Error('Non-integer value being assigned to '+this.table()+".geonameId");
		if (value < -2147483648 || value > 2147483647)
			throw new Error("Out-of-range value "+JSON.stringify(value)+" being assigned to "+this.table()+".geonameId");
		return value;
};

/**
 * Returns the maximum integer that can be assigned to the geonameId field
 * @return {integer}
 */
Base.prototype.maxSize_geonameId = function () {

		return 2147483647;
};

	/**
	 * Returns schema information for geonameId column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
Base.column_geonameId = function () {

return [["int",null,null,null],true,"MUL",null];
};

/**
 * Method is called before setting the field and verifies if value is string of length within acceptable limit.
 * Optionally accept numeric value which is converted to string
 * @method beforeSet_countryCode
 * @param {string} value
 * @return {string} The value
 * @throws {Error} An exception is thrown if 'value' is not string or is exceedingly long
 */
Base.prototype.beforeSet_countryCode = function (value) {
		if (value == undefined) return value;
		if (value instanceof Db.Expression) return value;
		if (typeof value !== "string" && typeof value !== "number")
			throw new Error('Must pass a String to '+this.table()+".countryCode");
		if (typeof value === "string" && value.length > 2)
			throw new Error('Exceedingly long value being assigned to '+this.table()+".countryCode");
		return value;
};

	/**
	 * Returns the maximum string length that can be assigned to the countryCode field
	 * @return {integer}
	 */
Base.prototype.maxSize_countryCode = function () {

		return 2;
};

	/**
	 * Returns schema information for countryCode column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
Base.column_countryCode = function () {

return [["varchar","2","",false],true,"",null];
};

/**
 * Method is called before setting the field and verifies if integer value falls within allowed limits
 * @method beforeSet_registeredGeonameId
 * @param {integer} value
 * @return {integer} The value
 * @throws {Error} An exception is thrown if 'value' is not integer or does not fit in allowed range
 */
Base.prototype.beforeSet_registeredGeonameId = function (value) {
		if (value == undefined) return value;
		if (value instanceof Db.Expression) return value;
		value = Number(value);
		if (isNaN(value) || Math.floor(value) != value) 
			throw new Error('Non-integer value being assigned to '+this.table()+".registeredGeonameId");
		if (value < -2147483648 || value > 2147483647)
			throw new Error("Out-of-range value "+JSON.stringify(value)+" being assigned to "+this.table()+".registeredGeonameId");
		return value;
};

/**
 * Returns the maximum integer that can be assigned to the registeredGeonameId field
 * @return {integer}
 */
Base.prototype.maxSize_registeredGeonameId = function () {

		return 2147483647;
};

	/**
	 * Returns schema information for registeredGeonameId column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
Base.column_registeredGeonameId = function () {

return [["int",null,null,null],true,"",null];
};

/**
 * Method is called before setting the field and verifies if integer value falls within allowed limits
 * @method beforeSet_representedGeonameId
 * @param {integer} value
 * @return {integer} The value
 * @throws {Error} An exception is thrown if 'value' is not integer or does not fit in allowed range
 */
Base.prototype.beforeSet_representedGeonameId = function (value) {
		if (value == undefined) return value;
		if (value instanceof Db.Expression) return value;
		value = Number(value);
		if (isNaN(value) || Math.floor(value) != value) 
			throw new Error('Non-integer value being assigned to '+this.table()+".representedGeonameId");
		if (value < -2147483648 || value > 2147483647)
			throw new Error("Out-of-range value "+JSON.stringify(value)+" being assigned to "+this.table()+".representedGeonameId");
		return value;
};

/**
 * Returns the maximum integer that can be assigned to the representedGeonameId field
 * @return {integer}
 */
Base.prototype.maxSize_representedGeonameId = function () {

		return 2147483647;
};

	/**
	 * Returns schema information for representedGeonameId column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
Base.column_representedGeonameId = function () {

return [["int",null,null,null],true,"",null];
};

/**
 * Method is called before setting the field and verifies if integer value falls within allowed limits
 * @method beforeSet_isAnonymousProxy
 * @param {integer} value
 * @return {integer} The value
 * @throws {Error} An exception is thrown if 'value' is not integer or does not fit in allowed range
 */
Base.prototype.beforeSet_isAnonymousProxy = function (value) {
		if (value instanceof Db.Expression) return value;
		value = Number(value);
		if (isNaN(value) || Math.floor(value) != value) 
			throw new Error('Non-integer value being assigned to '+this.table()+".isAnonymousProxy");
		if (value < -128 || value > 127)
			throw new Error("Out-of-range value "+JSON.stringify(value)+" being assigned to "+this.table()+".isAnonymousProxy");
		return value;
};

/**
 * Returns the maximum integer that can be assigned to the isAnonymousProxy field
 * @return {integer}
 */
Base.prototype.maxSize_isAnonymousProxy = function () {

		return 127;
};

	/**
	 * Returns schema information for isAnonymousProxy column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
Base.column_isAnonymousProxy = function () {

return [["tinyint","1","",false],false,"","0"];
};

/**
 * Method is called before setting the field and verifies if integer value falls within allowed limits
 * @method beforeSet_isSatelliteProvider
 * @param {integer} value
 * @return {integer} The value
 * @throws {Error} An exception is thrown if 'value' is not integer or does not fit in allowed range
 */
Base.prototype.beforeSet_isSatelliteProvider = function (value) {
		if (value instanceof Db.Expression) return value;
		value = Number(value);
		if (isNaN(value) || Math.floor(value) != value) 
			throw new Error('Non-integer value being assigned to '+this.table()+".isSatelliteProvider");
		if (value < -128 || value > 127)
			throw new Error("Out-of-range value "+JSON.stringify(value)+" being assigned to "+this.table()+".isSatelliteProvider");
		return value;
};

/**
 * Returns the maximum integer that can be assigned to the isSatelliteProvider field
 * @return {integer}
 */
Base.prototype.maxSize_isSatelliteProvider = function () {

		return 127;
};

	/**
	 * Returns schema information for isSatelliteProvider column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
Base.column_isSatelliteProvider = function () {

return [["tinyint","1","",false],false,"","0"];
};

/**
 * Method is called before setting the field and verifies if value is string of length within acceptable limit.
 * Optionally accept numeric value which is converted to string
 * @method beforeSet_postcode
 * @param {string} value
 * @return {string} The value
 * @throws {Error} An exception is thrown if 'value' is not string or is exceedingly long
 */
Base.prototype.beforeSet_postcode = function (value) {
		if (value == undefined) return value;
		if (value instanceof Db.Expression) return value;
		if (typeof value !== "string" && typeof value !== "number")
			throw new Error('Must pass a String to '+this.table()+".postcode");
		if (typeof value === "string" && value.length > 20)
			throw new Error('Exceedingly long value being assigned to '+this.table()+".postcode");
		return value;
};

	/**
	 * Returns the maximum string length that can be assigned to the postcode field
	 * @return {integer}
	 */
Base.prototype.maxSize_postcode = function () {

		return 20;
};

	/**
	 * Returns schema information for postcode column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
Base.column_postcode = function () {

return [["varchar","20","",false],true,"MUL",null];
};

/**
 * Method is called before setting the field to verify if value is a number
 * @method beforeSet_latitude
 * @param {number} value
 * @return {number} The value
 * @throws {Error} If 'value' is not number
 */
Base.prototype.beforeSet_latitude = function (value) {
		if (value == undefined) return value;
		if (value instanceof Db.Expression) return value;
		value = Number(value);
		if (isNaN(value))
			throw new Error('Non-number value being assigned to '+this.table()+".latitude");
		return value;
};

	/**
	 * Returns schema information for latitude column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
Base.column_latitude = function () {

return [["double",null,null,null],true,"",null];
};

/**
 * Method is called before setting the field to verify if value is a number
 * @method beforeSet_longitude
 * @param {number} value
 * @return {number} The value
 * @throws {Error} If 'value' is not number
 */
Base.prototype.beforeSet_longitude = function (value) {
		if (value == undefined) return value;
		if (value instanceof Db.Expression) return value;
		value = Number(value);
		if (isNaN(value))
			throw new Error('Non-number value being assigned to '+this.table()+".longitude");
		return value;
};

	/**
	 * Returns schema information for longitude column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
Base.column_longitude = function () {

return [["double",null,null,null],true,"",null];
};

/**
 * Method is called before setting the field and verifies if integer value falls within allowed limits
 * @method beforeSet_accuracy
 * @param {integer} value
 * @return {integer} The value
 * @throws {Error} An exception is thrown if 'value' is not integer or does not fit in allowed range
 */
Base.prototype.beforeSet_accuracy = function (value) {
		if (value == undefined) return value;
		if (value instanceof Db.Expression) return value;
		value = Number(value);
		if (isNaN(value) || Math.floor(value) != value) 
			throw new Error('Non-integer value being assigned to '+this.table()+".accuracy");
		if (value < -2147483648 || value > 2147483647)
			throw new Error("Out-of-range value "+JSON.stringify(value)+" being assigned to "+this.table()+".accuracy");
		return value;
};

/**
 * Returns the maximum integer that can be assigned to the accuracy field
 * @return {integer}
 */
Base.prototype.maxSize_accuracy = function () {

		return 2147483647;
};

	/**
	 * Returns schema information for accuracy column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
Base.column_accuracy = function () {

return [["int",null,null,null],true,"",null];
};

/**
 * Method is called before setting the field and verifies if integer value falls within allowed limits
 * @method beforeSet_isAnycast
 * @param {integer} value
 * @return {integer} The value
 * @throws {Error} An exception is thrown if 'value' is not integer or does not fit in allowed range
 */
Base.prototype.beforeSet_isAnycast = function (value) {
		if (value instanceof Db.Expression) return value;
		value = Number(value);
		if (isNaN(value) || Math.floor(value) != value) 
			throw new Error('Non-integer value being assigned to '+this.table()+".isAnycast");
		if (value < -128 || value > 127)
			throw new Error("Out-of-range value "+JSON.stringify(value)+" being assigned to "+this.table()+".isAnycast");
		return value;
};

/**
 * Returns the maximum integer that can be assigned to the isAnycast field
 * @return {integer}
 */
Base.prototype.maxSize_isAnycast = function () {

		return 127;
};

	/**
	 * Returns schema information for isAnycast column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
Base.column_isAnycast = function () {

return [["tinyint","1","",false],false,"","0"];
};

/**
 * Check if mandatory fields are set and updates 'magic fields' with appropriate values
 * @method beforeSave
 * @param {Object} value The object of fields
 * @param {Function} callback Call this callback if you return null
 * @return {Object|null} Return the fields, modified if necessary. If you return null, then you should call the callback(err, modifiedFields)
 * @throws {Error} If e.g. mandatory field is not set or a bad values are supplied
 */
Base.prototype.beforeSave = function (value) {
	var fields = ['ipMin','ipMax'], i;
	if (!this._retrieved) {
		var table = this.table();
		for (i=0; i<fields.length; i++) {
			if (this.fields[fields[i]] === undefined) {
				throw new Error("the field "+table+"."+fields[i]+" needs a value, because it is NOT NULL, not auto_increment, and lacks a default value.");
			}
		}
	}
	if (this.fields["ipMin"] == undefined && value["ipMin"] == undefined) {
		this.fields["ipMin"] = value["ipMin"] = "";
	}
	if (this.fields["ipMax"] == undefined && value["ipMax"] == undefined) {
		this.fields["ipMax"] = value["ipMax"] = "";
	}
	return value;
};

module.exports = Base;