<?php

/**
 * Autogenerated base class representing city rows
 * in the Places database.
 *
 * Don't change this file, since it can be overwritten.
 * Instead, change the Places_City.php file.
 *
 * @module Places
 */
/**
 * Base class representing 'City' rows in the 'Places' database
 * @class Base_Places_City
 * @extends Db_Row
 *
 * @param {array} [$fields=array()] The fields values to initialize table row as 
 * an associative array of $column => $value pairs
 * @param {integer} [$fields.geonameId] defaults to 0
 * @param {string} [$fields.countryCode] defaults to ""
 * @param {string} [$fields.normalizedName] defaults to ""
 * @param {string} [$fields.englishName] defaults to ""
 * @param {string} [$fields.localName] defaults to ""
 * @param {string} [$fields.stateName] defaults to null
 * @param {string} [$fields.stateCode] defaults to null
 * @param {string} [$fields.regionName] defaults to null
 * @param {string} [$fields.regionCode] defaults to null
 * @param {float} [$fields.latitude] defaults to 0
 * @param {float} [$fields.longitude] defaults to 0
 * @param {string} [$fields.geohash] defaults to ""
 * @param {string} [$fields.timeZone] defaults to null
 * @param {integer} [$fields.population] defaults to 0
 * @param {string} [$fields.featureCode] defaults to null
 */
abstract class Base_Places_City extends Db_Row
{
	/**
	 * @property $geonameId
	 * @type integer
	 * @default 0
	 * 
	 */
	/**
	 * @property $countryCode
	 * @type string
	 * @default ""
	 * 
	 */
	/**
	 * @property $normalizedName
	 * @type string
	 * @default ""
	 * 
	 */
	/**
	 * @property $englishName
	 * @type string
	 * @default ""
	 * 
	 */
	/**
	 * @property $localName
	 * @type string
	 * @default ""
	 * 
	 */
	/**
	 * @property $stateName
	 * @type string
	 * @default null
	 * 
	 */
	/**
	 * @property $stateCode
	 * @type string
	 * @default null
	 * 
	 */
	/**
	 * @property $regionName
	 * @type string
	 * @default null
	 * 
	 */
	/**
	 * @property $regionCode
	 * @type string
	 * @default null
	 * 
	 */
	/**
	 * @property $latitude
	 * @type float
	 * @default 0
	 * 
	 */
	/**
	 * @property $longitude
	 * @type float
	 * @default 0
	 * 
	 */
	/**
	 * @property $geohash
	 * @type string
	 * @default ""
	 * 
	 */
	/**
	 * @property $timeZone
	 * @type string
	 * @default null
	 * 
	 */
	/**
	 * @property $population
	 * @type integer
	 * @default 0
	 * 
	 */
	/**
	 * @property $featureCode
	 * @type string
	 * @default null
	 * 
	 */
	/**
	 * The setUp() method is called the first time
	 * an object of this class is constructed.
	 * @method setUp
	 */
	function setUp()
	{
		$this->setDb(self::db());
		$this->setTable(self::table());
		$this->setPrimaryKey(
			array (
			  0 => 'geonameId',
			)
		);
	}

	/**
	 * Connects to database
	 * @method db
	 * @static
	 * @return {Db_Interface} The database object
	 */
	static function db()
	{
		return Db::connect('Places');
	}

	/**
	 * Retrieve the table name to use in SQL statement
	 * @method table
	 * @static
	 * @param {boolean} [$with_db_name=true] Indicates wheather table name should contain the database name
	 * @param {string} [$alias=null] You can optionally provide an alias for the table to be used in queries
 	 * @return {string|Db_Expression} The table name as string optionally without database name if no table sharding
	 * was started or Db_Expression class with prefix and database name templates is table was sharded
	 */
	static function table($with_db_name = true, $alias = null)
	{
		if (class_exists('Q_Config') and Q_Config::get('Db', 'connections', 'Places', 'indexes', 'City', false)) {
			return new Db_Expression(($with_db_name ? '{{dbname}}.' : '').'{{prefix}}'.'city');
		} else {
			$conn = Db::getConnection('Places');
  			$prefix = empty($conn['prefix']) ? '' : $conn['prefix'];
  			$table_name = $prefix . 'city';
  			if (!$with_db_name)
  				return $table_name;
  			$db = Db::connect('Places');
			$alias = isset($alias) ? ' '.$alias : '';
  			return $db->dbName().'.'.$table_name.$alias;
		}
	}
	/**
	 * The connection name for the class
	 * @method connectionName
	 * @static
	 * @return {string} The name of the connection
	 */
	static function connectionName()
	{
		return 'Places';
	}

	/**
	 * Create SELECT query to the class table
	 * @method select
	 * @static
	 * @param {string|array} [$fields=null] The fields as strings, or array of alias=>field.
	 *   The default is to return all fields of the table.
	 * @param {string} [$alias=null] Table alias.
	 * @return {Db_Query_Mysql} The generated query
	 */
	static function select($fields=null, $alias = null)
	{
		if (!isset($fields)) {
			$fieldNames = array();
			$a = isset($alias) ? $alias.'.' : '';
			foreach (self::fieldNames() as $fn) {
				$fieldNames[] = $a .  $fn;
			}
			$fields = implode(',', $fieldNames);
		}
		$alias = isset($alias) ? ' '.$alias : '';
		$q = self::db()->select($fields, self::table(true, $alias));
		$q->className = 'Places_City';
		return $q;
	}

	/**
	 * Create UPDATE query to the class table
	 * @method update
	 * @static
	 * @param {string} [$alias=null] Table alias
	 * @return {Db_Query_Mysql} The generated query
	 */
	static function update($alias = null)
	{
		$alias = isset($alias) ? ' '.$alias : '';
		$q = self::db()->update(self::table(true, $alias));
		$q->className = 'Places_City';
		return $q;
	}

	/**
	 * Create DELETE query to the class table
	 * @method delete
	 * @static
	 * @param {string} [$table_using=null] If set, adds a USING clause with this table
	 * @param {string} [$alias=null] Table alias
	 * @return {Db_Query_Mysql} The generated query
	 */
	static function delete($table_using = null, $alias = null)
	{
		$alias = isset($alias) ? ' '.$alias : '';
		$q = self::db()->delete(self::table(true, $alias), $table_using);
		$q->className = 'Places_City';
		return $q;
	}

	/**
	 * Create INSERT query to the class table
	 * @method insert
	 * @static
	 * @param {array} [$fields=array()] The fields as an associative array of column => value pairs
	 * @param {string} [$alias=null] Table alias
	 * @return {Db_Query_Mysql} The generated query
	 */
	static function insert($fields = array(), $alias = null)
	{
		$alias = isset($alias) ? ' '.$alias : '';
		$q = self::db()->insert(self::table(true, $alias), $fields);
		$q->className = 'Places_City';
		return $q;
	}
	
	/**
	 * Inserts multiple rows into a single table, preparing the statement only once,
	 * and executes all the queries.
	 * @method insertManyAndExecute
	 * @static
	 * @param {array} [$rows=array()] The array of rows to insert. 
	 * (The field names for the prepared statement are taken from the first row.)
	 * You cannot use Db_Expression objects here, because the function binds all parameters with PDO.
	 * @param {array} [$options=array()]
	 *   An associative array of options, including:
	 *
	 * * "chunkSize" {integer} The number of rows to insert at a time. defaults to 20.<br>
	 * * "onDuplicateKeyUpdate" {array} You can put an array of fieldname => value pairs here,
	 * 		which will add an ON DUPLICATE KEY UPDATE clause to the query.
	 *
	 */
	static function insertManyAndExecute($rows = array(), $options = array())
	{
		self::db()->insertManyAndExecute(
			self::table(), $rows,
			array_merge($options, array('className' => 'Places_City'))
		);
	}
	
	/**
	 * Create raw query with begin clause
	 * You'll have to specify shards yourself when calling execute().
	 * @method begin
	 * @static
	 * @param {string} [$lockType=null] First parameter to pass to query->begin() function
	 * @param {string} [$transactionKey=null] Pass a transactionKey here to "resolve" a previously
	 *  executed that began a transaction with ->begin(). This is to guard against forgetting
	 *  to "resolve" a begin() query with a corresponding commit() or rollback() query
	 *  from code that knows about this transactionKey. Passing a transactionKey that doesn't
	 *  match the latest one on the transaction "stack" also generates an error.
	 *  Passing "*" here matches any transaction key that may have been on the top of the stack.
	 * @return {Db_Query_Mysql} The generated query
	 */
	static function begin($lockType = null, $transactionKey = null)
	{
		$q = self::db()->rawQuery('')->begin($lockType, $transactionKey);
		$q->className = 'Places_City';
		return $q;
	}
	
	/**
	 * Create raw query with commit clause
	 * You'll have to specify shards yourself when calling execute().
	 * @method commit
	 * @static
	 * @param {string} [$transactionKey=null] Pass a transactionKey here to "resolve" a previously
	 *  executed that began a transaction with ->begin(). This is to guard against forgetting
	 *  to "resolve" a begin() query with a corresponding commit() or rollback() query
	 *  from code that knows about this transactionKey. Passing a transactionKey that doesn't
	 *  match the latest one on the transaction "stack" also generates an error.
	 *  Passing "*" here matches any transaction key that may have been on the top of the stack.
	 * @return {Db_Query_Mysql} The generated query
	 */
	static function commit($transactionKey = null)
	{
		$q = self::db()->rawQuery('')->commit($transactionKey);
		$q->className = 'Places_City';
		return $q;
	}
	
	/**
	 * Create raw query with rollback clause
	 * @method rollback
	 * @static
	 * @param {array} $criteria Can be used to target the rollback to some shards.
	 *  Otherwise you'll have to specify shards yourself when calling execute().
	 * @return {Db_Query_Mysql} The generated query
	 */
	static function rollback()
	{
		$q = self::db()->rawQuery('')->rollback();
		$q->className = 'Places_City';
		return $q;
	}
	
	/**
	 * Method is called before setting the field and verifies if integer value falls within allowed limits
	 * @method beforeSet_geonameId
	 * @param {integer} $value
	 * @return {array} An array of field name and value
	 * @throws {Exception} An exception is thrown if $value is not integer or does not fit in allowed range
	 */
	function beforeSet_geonameId($value)
	{
		if ($value instanceof Db_Expression
               or $value instanceof Db_Range) {
			return array('geonameId', $value);
		}
		if (!is_numeric($value) or floor($value) != $value)
			throw new Exception('Non-integer value being assigned to '.$this->getTable().".geonameId");
		$value = intval($value);
		if ($value < -2147483648 or $value > 2147483647) {
			$json = json_encode($value);
			throw new Exception("Out-of-range value $json being assigned to ".$this->getTable().".geonameId");
		}
		return array('geonameId', $value);			
	}

	/**
	 * @method maxSize_geonameId
	 * Returns the maximum integer that can be assigned to the geonameId field
	 * @return {integer}
	 */
	function maxSize_geonameId()
	{

		return 2147483647;			
	}

	/**
	 * Returns schema information for geonameId column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
	static function column_geonameId()
	{

return array (
  0 => 
  array (
    0 => 'int',
    1 => NULL,
    2 => NULL,
    3 => NULL,
  ),
  1 => false,
  2 => 'PRI',
  3 => NULL,
);			
	}

	/**
	 * Method is called before setting the field and verifies if value is string of length within acceptable limit.
	 * Optionally accept numeric value which is converted to string
	 * @method beforeSet_countryCode
	 * @param {string} $value
	 * @return {array} An array of field name and value
	 * @throws {Exception} An exception is thrown if $value is not string or is exceedingly long
	 */
	function beforeSet_countryCode($value)
	{
		if (!isset($value)) {
			$value='';
		}
		if ($value instanceof Db_Expression
               or $value instanceof Db_Range) {
			return array('countryCode', $value);
		}
		if (!is_string($value) and !is_numeric($value))
			throw new Exception('Must pass a string to '.$this->getTable().".countryCode");
		if (strlen($value) > 2)
			throw new Exception('Exceedingly long value being assigned to '.$this->getTable().".countryCode");
		return array('countryCode', $value);			
	}

	/**
	 * Returns the maximum string length that can be assigned to the countryCode field
	 * @return {integer}
	 */
	function maxSize_countryCode()
	{

		return 2;			
	}

	/**
	 * Returns schema information for countryCode column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
	static function column_countryCode()
	{

return array (
  0 => 
  array (
    0 => 'varchar',
    1 => '2',
    2 => '',
    3 => false,
  ),
  1 => false,
  2 => 'MUL',
  3 => NULL,
);			
	}

	/**
	 * Method is called before setting the field and verifies if value is string of length within acceptable limit.
	 * Optionally accept numeric value which is converted to string
	 * @method beforeSet_normalizedName
	 * @param {string} $value
	 * @return {array} An array of field name and value
	 * @throws {Exception} An exception is thrown if $value is not string or is exceedingly long
	 */
	function beforeSet_normalizedName($value)
	{
		if (!isset($value)) {
			$value='';
		}
		if ($value instanceof Db_Expression
               or $value instanceof Db_Range) {
			return array('normalizedName', $value);
		}
		if (!is_string($value) and !is_numeric($value))
			throw new Exception('Must pass a string to '.$this->getTable().".normalizedName");
		if (strlen($value) > 180)
			throw new Exception('Exceedingly long value being assigned to '.$this->getTable().".normalizedName");
		return array('normalizedName', $value);			
	}

	/**
	 * Returns the maximum string length that can be assigned to the normalizedName field
	 * @return {integer}
	 */
	function maxSize_normalizedName()
	{

		return 180;			
	}

	/**
	 * Returns schema information for normalizedName column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
	static function column_normalizedName()
	{

return array (
  0 => 
  array (
    0 => 'varchar',
    1 => '180',
    2 => '',
    3 => false,
  ),
  1 => false,
  2 => 'MUL',
  3 => NULL,
);			
	}

	/**
	 * Method is called before setting the field and verifies if value is string of length within acceptable limit.
	 * Optionally accept numeric value which is converted to string
	 * @method beforeSet_englishName
	 * @param {string} $value
	 * @return {array} An array of field name and value
	 * @throws {Exception} An exception is thrown if $value is not string or is exceedingly long
	 */
	function beforeSet_englishName($value)
	{
		if (!isset($value)) {
			$value='';
		}
		if ($value instanceof Db_Expression
               or $value instanceof Db_Range) {
			return array('englishName', $value);
		}
		if (!is_string($value) and !is_numeric($value))
			throw new Exception('Must pass a string to '.$this->getTable().".englishName");
		if (strlen($value) > 180)
			throw new Exception('Exceedingly long value being assigned to '.$this->getTable().".englishName");
		return array('englishName', $value);			
	}

	/**
	 * Returns the maximum string length that can be assigned to the englishName field
	 * @return {integer}
	 */
	function maxSize_englishName()
	{

		return 180;			
	}

	/**
	 * Returns schema information for englishName column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
	static function column_englishName()
	{

return array (
  0 => 
  array (
    0 => 'varchar',
    1 => '180',
    2 => '',
    3 => false,
  ),
  1 => false,
  2 => '',
  3 => NULL,
);			
	}

	/**
	 * Method is called before setting the field and verifies if value is string of length within acceptable limit.
	 * Optionally accept numeric value which is converted to string
	 * @method beforeSet_localName
	 * @param {string} $value
	 * @return {array} An array of field name and value
	 * @throws {Exception} An exception is thrown if $value is not string or is exceedingly long
	 */
	function beforeSet_localName($value)
	{
		if (!isset($value)) {
			$value='';
		}
		if ($value instanceof Db_Expression
               or $value instanceof Db_Range) {
			return array('localName', $value);
		}
		if (!is_string($value) and !is_numeric($value))
			throw new Exception('Must pass a string to '.$this->getTable().".localName");
		if (strlen($value) > 180)
			throw new Exception('Exceedingly long value being assigned to '.$this->getTable().".localName");
		return array('localName', $value);			
	}

	/**
	 * Returns the maximum string length that can be assigned to the localName field
	 * @return {integer}
	 */
	function maxSize_localName()
	{

		return 180;			
	}

	/**
	 * Returns schema information for localName column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
	static function column_localName()
	{

return array (
  0 => 
  array (
    0 => 'varchar',
    1 => '180',
    2 => '',
    3 => false,
  ),
  1 => false,
  2 => '',
  3 => NULL,
);			
	}

	/**
	 * Method is called before setting the field and verifies if value is string of length within acceptable limit.
	 * Optionally accept numeric value which is converted to string
	 * @method beforeSet_stateName
	 * @param {string} $value
	 * @return {array} An array of field name and value
	 * @throws {Exception} An exception is thrown if $value is not string or is exceedingly long
	 */
	function beforeSet_stateName($value)
	{
		if (!isset($value)) {
			return array('stateName', $value);
		}
		if ($value instanceof Db_Expression
               or $value instanceof Db_Range) {
			return array('stateName', $value);
		}
		if (!is_string($value) and !is_numeric($value))
			throw new Exception('Must pass a string to '.$this->getTable().".stateName");
		if (strlen($value) > 100)
			throw new Exception('Exceedingly long value being assigned to '.$this->getTable().".stateName");
		return array('stateName', $value);			
	}

	/**
	 * Returns the maximum string length that can be assigned to the stateName field
	 * @return {integer}
	 */
	function maxSize_stateName()
	{

		return 100;			
	}

	/**
	 * Returns schema information for stateName column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
	static function column_stateName()
	{

return array (
  0 => 
  array (
    0 => 'varchar',
    1 => '100',
    2 => '',
    3 => false,
  ),
  1 => true,
  2 => '',
  3 => NULL,
);			
	}

	/**
	 * Method is called before setting the field and verifies if value is string of length within acceptable limit.
	 * Optionally accept numeric value which is converted to string
	 * @method beforeSet_stateCode
	 * @param {string} $value
	 * @return {array} An array of field name and value
	 * @throws {Exception} An exception is thrown if $value is not string or is exceedingly long
	 */
	function beforeSet_stateCode($value)
	{
		if (!isset($value)) {
			return array('stateCode', $value);
		}
		if ($value instanceof Db_Expression
               or $value instanceof Db_Range) {
			return array('stateCode', $value);
		}
		if (!is_string($value) and !is_numeric($value))
			throw new Exception('Must pass a string to '.$this->getTable().".stateCode");
		if (strlen($value) > 20)
			throw new Exception('Exceedingly long value being assigned to '.$this->getTable().".stateCode");
		return array('stateCode', $value);			
	}

	/**
	 * Returns the maximum string length that can be assigned to the stateCode field
	 * @return {integer}
	 */
	function maxSize_stateCode()
	{

		return 20;			
	}

	/**
	 * Returns schema information for stateCode column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
	static function column_stateCode()
	{

return array (
  0 => 
  array (
    0 => 'varchar',
    1 => '20',
    2 => '',
    3 => false,
  ),
  1 => true,
  2 => '',
  3 => NULL,
);			
	}

	/**
	 * Method is called before setting the field and verifies if value is string of length within acceptable limit.
	 * Optionally accept numeric value which is converted to string
	 * @method beforeSet_regionName
	 * @param {string} $value
	 * @return {array} An array of field name and value
	 * @throws {Exception} An exception is thrown if $value is not string or is exceedingly long
	 */
	function beforeSet_regionName($value)
	{
		if (!isset($value)) {
			return array('regionName', $value);
		}
		if ($value instanceof Db_Expression
               or $value instanceof Db_Range) {
			return array('regionName', $value);
		}
		if (!is_string($value) and !is_numeric($value))
			throw new Exception('Must pass a string to '.$this->getTable().".regionName");
		if (strlen($value) > 100)
			throw new Exception('Exceedingly long value being assigned to '.$this->getTable().".regionName");
		return array('regionName', $value);			
	}

	/**
	 * Returns the maximum string length that can be assigned to the regionName field
	 * @return {integer}
	 */
	function maxSize_regionName()
	{

		return 100;			
	}

	/**
	 * Returns schema information for regionName column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
	static function column_regionName()
	{

return array (
  0 => 
  array (
    0 => 'varchar',
    1 => '100',
    2 => '',
    3 => false,
  ),
  1 => true,
  2 => '',
  3 => NULL,
);			
	}

	/**
	 * Method is called before setting the field and verifies if value is string of length within acceptable limit.
	 * Optionally accept numeric value which is converted to string
	 * @method beforeSet_regionCode
	 * @param {string} $value
	 * @return {array} An array of field name and value
	 * @throws {Exception} An exception is thrown if $value is not string or is exceedingly long
	 */
	function beforeSet_regionCode($value)
	{
		if (!isset($value)) {
			return array('regionCode', $value);
		}
		if ($value instanceof Db_Expression
               or $value instanceof Db_Range) {
			return array('regionCode', $value);
		}
		if (!is_string($value) and !is_numeric($value))
			throw new Exception('Must pass a string to '.$this->getTable().".regionCode");
		if (strlen($value) > 20)
			throw new Exception('Exceedingly long value being assigned to '.$this->getTable().".regionCode");
		return array('regionCode', $value);			
	}

	/**
	 * Returns the maximum string length that can be assigned to the regionCode field
	 * @return {integer}
	 */
	function maxSize_regionCode()
	{

		return 20;			
	}

	/**
	 * Returns schema information for regionCode column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
	static function column_regionCode()
	{

return array (
  0 => 
  array (
    0 => 'varchar',
    1 => '20',
    2 => '',
    3 => false,
  ),
  1 => true,
  2 => '',
  3 => NULL,
);			
	}

	function beforeSet_latitude($value)
	{
		if ($value instanceof Db_Expression
               or $value instanceof Db_Range) {
			return array('latitude', $value);
		}
		if (!is_numeric($value))
			throw new Exception('Non-numeric value being assigned to '.$this->getTable().".latitude");
		$value = floatval($value);
		return array('latitude', $value);			
	}

	/**
	 * Returns schema information for latitude column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
	static function column_latitude()
	{

return array (
  0 => 
  array (
    0 => 'double',
    1 => NULL,
    2 => NULL,
    3 => NULL,
  ),
  1 => false,
  2 => 'MUL',
  3 => NULL,
);			
	}

	function beforeSet_longitude($value)
	{
		if ($value instanceof Db_Expression
               or $value instanceof Db_Range) {
			return array('longitude', $value);
		}
		if (!is_numeric($value))
			throw new Exception('Non-numeric value being assigned to '.$this->getTable().".longitude");
		$value = floatval($value);
		return array('longitude', $value);			
	}

	/**
	 * Returns schema information for longitude column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
	static function column_longitude()
	{

return array (
  0 => 
  array (
    0 => 'double',
    1 => NULL,
    2 => NULL,
    3 => NULL,
  ),
  1 => false,
  2 => '',
  3 => NULL,
);			
	}

	/**
	 * Method is called before setting the field and verifies if value is string of length within acceptable limit.
	 * Optionally accept numeric value which is converted to string
	 * @method beforeSet_geohash
	 * @param {string} $value
	 * @return {array} An array of field name and value
	 * @throws {Exception} An exception is thrown if $value is not string or is exceedingly long
	 */
	function beforeSet_geohash($value)
	{
		if (!isset($value)) {
			$value='';
		}
		if ($value instanceof Db_Expression
               or $value instanceof Db_Range) {
			return array('geohash', $value);
		}
		if (!is_string($value) and !is_numeric($value))
			throw new Exception('Must pass a string to '.$this->getTable().".geohash");
		if (strlen($value) > 31)
			throw new Exception('Exceedingly long value being assigned to '.$this->getTable().".geohash");
		return array('geohash', $value);			
	}

	/**
	 * Returns the maximum string length that can be assigned to the geohash field
	 * @return {integer}
	 */
	function maxSize_geohash()
	{

		return 31;			
	}

	/**
	 * Returns schema information for geohash column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
	static function column_geohash()
	{

return array (
  0 => 
  array (
    0 => 'varchar',
    1 => '31',
    2 => '',
    3 => false,
  ),
  1 => false,
  2 => '',
  3 => NULL,
);			
	}

	/**
	 * Method is called before setting the field and verifies if value is string of length within acceptable limit.
	 * Optionally accept numeric value which is converted to string
	 * @method beforeSet_timeZone
	 * @param {string} $value
	 * @return {array} An array of field name and value
	 * @throws {Exception} An exception is thrown if $value is not string or is exceedingly long
	 */
	function beforeSet_timeZone($value)
	{
		if (!isset($value)) {
			return array('timeZone', $value);
		}
		if ($value instanceof Db_Expression
               or $value instanceof Db_Range) {
			return array('timeZone', $value);
		}
		if (!is_string($value) and !is_numeric($value))
			throw new Exception('Must pass a string to '.$this->getTable().".timeZone");
		if (strlen($value) > 40)
			throw new Exception('Exceedingly long value being assigned to '.$this->getTable().".timeZone");
		return array('timeZone', $value);			
	}

	/**
	 * Returns the maximum string length that can be assigned to the timeZone field
	 * @return {integer}
	 */
	function maxSize_timeZone()
	{

		return 40;			
	}

	/**
	 * Returns schema information for timeZone column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
	static function column_timeZone()
	{

return array (
  0 => 
  array (
    0 => 'varchar',
    1 => '40',
    2 => '',
    3 => false,
  ),
  1 => true,
  2 => '',
  3 => NULL,
);			
	}

	/**
	 * Method is called before setting the field and verifies if integer value falls within allowed limits
	 * @method beforeSet_population
	 * @param {integer} $value
	 * @return {array} An array of field name and value
	 * @throws {Exception} An exception is thrown if $value is not integer or does not fit in allowed range
	 */
	function beforeSet_population($value)
	{
		if (!isset($value)) {
			return array('population', $value);
		}
		if ($value instanceof Db_Expression
               or $value instanceof Db_Range) {
			return array('population', $value);
		}
		if (!is_numeric($value) or floor($value) != $value)
			throw new Exception('Non-integer value being assigned to '.$this->getTable().".population");
		$value = intval($value);
		if ($value < -2147483648 or $value > 2147483647) {
			$json = json_encode($value);
			throw new Exception("Out-of-range value $json being assigned to ".$this->getTable().".population");
		}
		return array('population', $value);			
	}

	/**
	 * @method maxSize_population
	 * Returns the maximum integer that can be assigned to the population field
	 * @return {integer}
	 */
	function maxSize_population()
	{

		return 2147483647;			
	}

	/**
	 * Returns schema information for population column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
	static function column_population()
	{

return array (
  0 => 
  array (
    0 => 'int',
    1 => NULL,
    2 => NULL,
    3 => NULL,
  ),
  1 => true,
  2 => '',
  3 => NULL,
);			
	}

	/**
	 * Method is called before setting the field and verifies if value is string of length within acceptable limit.
	 * Optionally accept numeric value which is converted to string
	 * @method beforeSet_featureCode
	 * @param {string} $value
	 * @return {array} An array of field name and value
	 * @throws {Exception} An exception is thrown if $value is not string or is exceedingly long
	 */
	function beforeSet_featureCode($value)
	{
		if (!isset($value)) {
			return array('featureCode', $value);
		}
		if ($value instanceof Db_Expression
               or $value instanceof Db_Range) {
			return array('featureCode', $value);
		}
		if (!is_string($value) and !is_numeric($value))
			throw new Exception('Must pass a string to '.$this->getTable().".featureCode");
		if (strlen($value) > 10)
			throw new Exception('Exceedingly long value being assigned to '.$this->getTable().".featureCode");
		return array('featureCode', $value);			
	}

	/**
	 * Returns the maximum string length that can be assigned to the featureCode field
	 * @return {integer}
	 */
	function maxSize_featureCode()
	{

		return 10;			
	}

	/**
	 * Returns schema information for featureCode column
	 * @return {array} [[typeName, displayRange, modifiers, unsigned], isNull, key, default]
	 */
	static function column_featureCode()
	{

return array (
  0 => 
  array (
    0 => 'varchar',
    1 => '10',
    2 => '',
    3 => false,
  ),
  1 => true,
  2 => '',
  3 => NULL,
);			
	}

	/**
	 * Check if mandatory fields are set and updates 'magic fields' with appropriate values
	 * @method beforeSave
	 * @param {array} $value The array of fields
	 * @return {array}
	 * @throws {Exception} If mandatory field is not set
	 */
	function beforeSave($value)
	{

		if (!isset($this->fields["geonameId"]) and !isset($value["geonameId"])) {
			$this->geonameId = $value["geonameId"] = 0;
		}
		if (!isset($this->fields["countryCode"]) and !isset($value["countryCode"])) {
			$this->countryCode = $value["countryCode"] = "";
		}
		if (!isset($this->fields["normalizedName"]) and !isset($value["normalizedName"])) {
			$this->normalizedName = $value["normalizedName"] = "";
		}
		if (!isset($this->fields["englishName"]) and !isset($value["englishName"])) {
			$this->englishName = $value["englishName"] = "";
		}
		if (!isset($this->fields["localName"]) and !isset($value["localName"])) {
			$this->localName = $value["localName"] = "";
		}
		if (!isset($this->fields["latitude"]) and !isset($value["latitude"])) {
			$this->latitude = $value["latitude"] = 0;
		}
		if (!isset($this->fields["longitude"]) and !isset($value["longitude"])) {
			$this->longitude = $value["longitude"] = 0;
		}
		if (!isset($this->fields["geohash"]) and !isset($value["geohash"])) {
			$this->geohash = $value["geohash"] = "";
		}
		return $value;			
	}

	/**
	 * Retrieves field names for class table
	 * @method fieldNames
	 * @static
	 * @param {string} [$table_alias=null] If set, the alieas is added to each field
	 * @param {string} [$field_alias_prefix=null] If set, the method returns associative array of ('prefixed field' => 'field') pairs
	 * @return {array} An array of field names
	 */
	static function fieldNames($table_alias = null, $field_alias_prefix = null)
	{
		$field_names = array('geonameId', 'countryCode', 'normalizedName', 'englishName', 'localName', 'stateName', 'stateCode', 'regionName', 'regionCode', 'latitude', 'longitude', 'geohash', 'timeZone', 'population', 'featureCode');
		$result = $field_names;
		if (!empty($table_alias)) {
			$temp = array();
			foreach ($result as $field_name)
				$temp[] = $table_alias . '.' . $field_name;
			$result = $temp;
		} 
		if (!empty($field_alias_prefix)) {
			$temp = array();
			reset($field_names);
			foreach ($result as $field_name) {
				$temp[$field_alias_prefix . current($field_names)] = $field_name;
				next($field_names);
			}
			$result = $temp;
		}
		return $result;			
	}
};